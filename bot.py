import discord
from discord.ext import commands
from discord import app_commands
import asyncio
import logging
import os
from config import DISCORD_TOKEN, PREFIX, ERROR_MESSAGES, YANDEX_TOKEN
from yandex_client import YandexMusicClient
from music_player import MusicPlayer
from playlist_manager import PlaylistManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

class YandexMusicBot(commands.Bot):
    def __init__(self):
        intents = discord.Intents.default()
        intents.message_content = True
        intents.voice_states = True
        # –£–±–∏—Ä–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ–Ω—Ç—ã
        intents.guilds = True
        intents.members = False  # –û—Ç–∫–ª—é—á–∞–µ–º Server Members Intent
        
        super().__init__(
            command_prefix=PREFIX,
            intents=intents,
            help_command=None,
            heartbeat_timeout=60.0,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            max_messages=1000  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫—ç—à —Å–æ–æ–±—â–µ–Ω–∏–π
        )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω-–∫–ª–∏–µ–Ω—Ç
        self.yandex_client = YandexMusicClient()
        self.music_player = MusicPlayer(self)
        self.playlist_manager = PlaylistManager(self.yandex_client)
    
    async def on_ready(self):
        """–°–æ–±—ã—Ç–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
        logger.info(f'{self.user} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ Discord!')
        logger.info(f'–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ {len(self.guilds)} —Å–µ—Ä–≤–µ—Ä–∞—Ö')
        
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ
        if YANDEX_TOKEN:
            if await self.yandex_client.authenticate_with_token(YANDEX_TOKEN):
                logger.info("–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ")
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω!")
        else:
            logger.error("YANDEX_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        activity = discord.Activity(
            type=discord.ActivityType.listening,
            name="üéµ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫—É"
        )
        await self.change_presence(activity=activity)
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è slash-–∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–≥–ª–æ–±–∞–ª—å–Ω–æ –∏ –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º)
        try:
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            await asyncio.sleep(2)
            global_synced = await self.tree.sync()
            logger.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö slash-–∫–æ–º–∞–Ω–¥: {len(global_synced)}")
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            for i, guild in enumerate(self.guilds):
                try:
                    await asyncio.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è–º–∏
                    guild_synced = await self.tree.sync(guild=guild)
                    logger.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {guild.name} ({guild.id}): {len(guild_synced)}")
                except Exception as ge:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {guild.id}: {ge}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å slash-–∫–æ–º–∞–Ω–¥—ã: {e}")
    
    async def on_command_error(self, ctx, error):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∫–æ–º–∞–Ω–¥"""
        if isinstance(error, commands.CommandNotFound):
            return
        
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã {ctx.command}: {error}")
        
        if isinstance(error, commands.MissingRequiredArgument):
            await ctx.send(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `{ctx.command.usage}`")
        elif isinstance(error, commands.BadArgument):
            await ctx.send("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç!")
        else:
            await ctx.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã!")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = YandexMusicBot()

@bot.hybrid_command(name='play', aliases=['p'], description='–ü–æ–∏—Å–∫ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞')
@app_commands.describe(query='–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏')
async def play_music(ctx, *, query: str = None):
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º—É–∑—ã–∫–∏ –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏"""
    if not query:
        await ctx.send("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞! –ü—Ä–∏–º–µ—Ä: `!play –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏`")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç—Ä–µ–∫–∞ –∏–∑ URL –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω URL
    track_id = None
    if 'music.yandex.ru/track/' in query:
        try:
            track_id = query.split('music.yandex.ru/track/')[1].split('?')[0].split('/')[0]
            logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω ID —Ç—Ä–µ–∫–∞ –∏–∑ URL: {track_id}")
        except:
            pass
    
    if track_id:
        # –ï—Å–ª–∏ —ç—Ç–æ ID —Ç—Ä–µ–∫–∞, –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –Ω–∞–ø—Ä—è–º—É—é
        await play_track_by_id(ctx, track_id)
        return
    
    if not await bot.music_player.join_voice_channel(ctx):
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –∏—â–µ—Ç —Ç—Ä–µ–∫
    search_msg = await ctx.send("üîç –ò—â—É —Ç—Ä–µ–∫...")
    
    try:
        # –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤
        tracks = await bot.yandex_client.search_tracks(query, limit=5)
        
        if not tracks:
            await search_msg.edit(content=ERROR_MESSAGES['no_results'])
            return
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫
        track = tracks[0]
        
        # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        track_url = await bot.yandex_client.get_track_url(track['id'])
        
        if not track_url:
            await search_msg.edit(content="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫!")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        if await bot.music_player.add_to_queue(ctx, track, track_url):
            await search_msg.edit(content=f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: **{track['title']}** - {track['artist']}")
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            voice_client = bot.music_player.get_voice_client(ctx.guild.id)
            if not voice_client.is_playing():
                await bot.music_player.play_next(ctx)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ play: {e}")
        await search_msg.edit(content="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—Ä–µ–∫–∞!")

async def play_track_by_id(ctx, track_id):
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –ø–æ ID"""
    if not await bot.music_player.join_voice_channel(ctx):
        return
    
    search_msg = await ctx.send("üîç –ó–∞–≥—Ä—É–∂–∞—é —Ç—Ä–µ–∫ –ø–æ ID...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ –ø–æ ID
        track_info = await bot.yandex_client.get_track_info_by_id(track_id)
        
        if not track_info:
            await search_msg.edit(content="‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        track_url = await bot.yandex_client.get_track_url(track_id)
        
        if not track_url:
            await search_msg.edit(content="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫!")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        if await bot.music_player.add_to_queue(ctx, track_info, track_url):
            await search_msg.edit(content=f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: **{track_info['title']}** - {track_info['artist']}")
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            voice_client = bot.music_player.get_voice_client(ctx.guild.id)
            if not voice_client.is_playing():
                await bot.music_player.play_next(ctx)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–∫–∞ –ø–æ ID: {e}")
        await search_msg.edit(content="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–∞!")

@bot.hybrid_command(name='mywave', aliases=['mw'], description="–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ '–ú–æ—è –≤–æ–ª–Ω–∞'")
async def my_wave(ctx):
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ '–ú–æ—è –≤–æ–ª–Ω–∞' –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏"""
    if not await bot.music_player.join_voice_channel(ctx):
        return
    
    search_msg = await ctx.send("üåä –ó–∞–≥—Ä—É–∂–∞—é '–ú–æ—è –≤–æ–ª–Ω–∞'...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–∫–∏ –∏–∑ "–ú–æ—è –≤–æ–ª–Ω–∞"
        tracks = await bot.yandex_client.get_my_wave_tracks(limit=1)
        
        if not tracks:
            await search_msg.edit(content="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å '–ú–æ—è –≤–æ–ª–Ω–∞'!")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 1 —Ç—Ä–µ–∫ –≤ –æ—á–µ—Ä–µ–¥—å
        if tracks:
            track = tracks[0]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ç—Ä–µ–∫
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É —Ç—Ä–µ–∫–∞ –µ—Å—Ç—å ID
            if 'id' not in track or not track['id']:
                await search_msg.edit(content="‚ùå –£ —Ç—Ä–µ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID!")
                return
            
            track_url = await bot.yandex_client.get_track_url(track['id'])
            
            if track_url and await bot.music_player.add_to_queue(ctx, track, track_url):
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                from music_player import MusicControlView
                view = MusicControlView(bot.music_player, ctx.guild.id)
                
                embed = discord.Embed(
                    title="‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç—Ä–µ–∫ –∏–∑ '–ú–æ—è –≤–æ–ª–Ω–∞'",
                    description=f"**{track['title']}**\n{track['artist']}",
                    color=0x00ff00
                )
                
                await search_msg.edit(content=None, embed=embed, view=view)
                
                # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º "–ú–æ—è –≤–æ–ª–Ω–∞" –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤
                bot.music_player.my_wave_mode[ctx.guild.id] = True
                
                # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
                voice_client = bot.music_player.get_voice_client(ctx.guild.id)
                if not voice_client.is_playing():
                    await bot.music_player.play_next(ctx)
            else:
                await search_msg.edit(content="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ –≤ –æ—á–µ—Ä–µ–¥—å!")
        else:
            await search_msg.edit(content="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–∫–∏ –∏–∑ '–ú–æ—è –≤–æ–ª–Ω–∞'!")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ mywave: {e}")
        await search_msg.edit(content="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ '–ú–æ—è –≤–æ–ª–Ω–∞'!")

@bot.command(name='mywavetest')
async def my_wave_test_command(ctx):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è '–ú–æ—è –≤–æ–ª–Ω–∞'"""
    try:
        await ctx.send("üîç –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–ª—É—á–µ–Ω–∏–µ '–ú–æ—è –≤–æ–ª–Ω–∞'...")
        
        tracks = await bot.yandex_client.get_my_wave_tracks(limit=5)
        
        if not tracks:
            await ctx.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–∫–∏ –∏–∑ '–ú–æ—è –≤–æ–ª–Ω–∞'")
            return
        
        embed = discord.Embed(
            title="üéµ –ú–æ—è –≤–æ–ª–Ω–∞ - –¢–µ—Å—Ç",
            description=f"–ù–∞–π–¥–µ–Ω–æ {len(tracks)} —Ç—Ä–µ–∫–æ–≤",
            color=0x00ff00
        )
        
        for i, track in enumerate(tracks[:5], 1):
            embed.add_field(
                name=f"{i}. {track['title']}",
                value=f"üë§ {track['artist']}\n‚è±Ô∏è {track['duration']}—Å\nüÜî ID: {track['id']}",
                inline=False
            )
        
        await ctx.send(embed=embed)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã mywavetest: {e}")
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è '–ú–æ—è –≤–æ–ª–Ω–∞': {e}")

@bot.command(name='radiodebug')
async def radio_debug_command(ctx):
    """–û—Ç–ª–∞–¥–∫–∞ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–π"""
    try:
        await ctx.send("üîç –û—Ç–ª–∞–¥–∫–∞ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤)
        stations = bot.yandex_client.client.rotor_stations_dashboard()
        
        if not stations or not hasattr(stations, 'stations'):
            await ctx.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏")
            return
        
        embed = discord.Embed(
            title="üìª –†–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏",
            description=f"–ù–∞–π–¥–µ–Ω–æ {len(stations.stations)} —Å—Ç–∞–Ω—Ü–∏–π",
            color=0x00ff00
        )
        
        for i, station in enumerate(stations.stations[:10], 1):
            if hasattr(station, 'station') and station.station:
                station_info = station.station
                station_name = getattr(station_info, 'name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                station_id = getattr(station_info, 'id', 'N/A')
                
                embed.add_field(
                    name=f"{i}. {station_name}",
                    value=f"üÜî ID: {station_id}",
                    inline=False
                )
        
        await ctx.send(embed=embed)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã radiodebug: {e}")
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–π: {e}")

@bot.command(name='radiotest')
async def radio_test_command(ctx, station_id=None):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏"""
    if not station_id:
        await ctx.send("‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏! –ü—Ä–∏–º–µ—Ä: `!radiotest user:onyourwave`")
        return
    
    try:
        await ctx.send(f"üîç –¢–µ—Å—Ç–∏—Ä—É—é —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—é {station_id}...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–∫–∏ —Å —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤)
        station_tracks = bot.yandex_client.client.rotor_station_tracks(station_id)
        
        if not station_tracks or not hasattr(station_tracks, 'sequence'):
            await ctx.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–∫–∏ —Å —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏")
            return
        
        tracks = []
        for track_short in station_tracks.sequence[:5]:
            if hasattr(track_short, 'track') and track_short.track:
                track = track_short.track
                track_info = {
                    'id': track.id,
                    'title': track.title,
                    'artist': ', '.join([artist.name for artist in track.artists]) if track.artists else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
                    'duration': track.duration_ms // 1000 if track.duration_ms else 0
                }
                tracks.append(track_info)
        
        if tracks:
            embed = discord.Embed(
                title=f"üìª –†–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—è {station_id}",
                description=f"–ù–∞–π–¥–µ–Ω–æ {len(tracks)} —Ç—Ä–µ–∫–æ–≤",
                color=0x00ff00
            )
            
            for i, track in enumerate(tracks, 1):
                embed.add_field(
                    name=f"{i}. {track['title']}",
                    value=f"üë§ {track['artist']}\n‚è±Ô∏è {track['duration']}—Å\nüÜî ID: {track['id']}",
                    inline=False
                )
            
            await ctx.send(embed=embed)
        else:
            await ctx.send("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤ –Ω–∞ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã radiotest: {e}")
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏: {e}")

@bot.command(name='mywavedirect')
async def my_wave_direct_command(ctx):
    """–ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ user:onyourwave"""
    try:
        await ctx.send("üîç –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ user:onyourwave...")
        
        tracks = await bot.yandex_client._get_direct_my_wave_tracks(limit=5)
        
        if not tracks:
            await ctx.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–∫–∏ —Å user:onyourwave")
            return
        
        embed = discord.Embed(
            title="üéµ user:onyourwave - –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
            description=f"–ù–∞–π–¥–µ–Ω–æ {len(tracks)} —Ç—Ä–µ–∫–æ–≤",
            color=0x00ff00
        )
        
        for i, track in enumerate(tracks, 1):
            embed.add_field(
                name=f"{i}. {track['title']}",
                value=f"üë§ {track['artist']}\n‚è±Ô∏è {track['duration']}—Å\nüÜî ID: {track['id']}",
                inline=False
            )
        
        await ctx.send(embed=embed)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã mywavedirect: {e}")
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è user:onyourwave: {e}")

@bot.hybrid_command(name='mywaveoff', description="–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ '–ú–æ—è –≤–æ–ª–Ω–∞'")
async def my_wave_off_command(ctx):
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ '–ú–æ—è –≤–æ–ª–Ω–∞'"""
    try:
        bot.music_player.my_wave_mode[ctx.guild.id] = False
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º batch_id –∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–≥—Ä–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞
        if ctx.guild.id in bot.music_player.my_wave_batch_id:
            del bot.music_player.my_wave_batch_id[ctx.guild.id]
        if ctx.guild.id in bot.music_player.played_tracks:
            del bot.music_player.played_tracks[ctx.guild.id]
        await ctx.send("üî¥ –†–µ–∂–∏–º '–ú–æ—è –≤–æ–ª–Ω–∞' –æ—Ç–∫–ª—é—á–µ–Ω. –¢—Ä–µ–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã mywaveoff: {e}")
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ '–ú–æ—è –≤–æ–ª–Ω–∞': {e}")

@bot.hybrid_command(name='played', description='–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–≥—Ä–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤')
async def played_tracks_command(ctx):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–≥—Ä–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤"""
    try:
        played_tracks = bot.music_player.get_played_tracks(ctx.guild.id)
        count = len(played_tracks)
        
        if count == 0:
            await ctx.send("üìä –ü–æ–∫–∞ –Ω–µ –±—ã–ª–æ –ø—Ä–æ–∏–≥—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞")
        else:
            await ctx.send(f"üìä –ü—Ä–æ–∏–≥—Ä–∞–Ω–æ —Ç—Ä–µ–∫–æ–≤: **{count}**")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã played: {e}")
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

@bot.hybrid_command(name='skip', aliases=['s'], description='–ü—Ä–æ–ø—É—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞')
async def skip_song(ctx):
    """–ü—Ä–æ–ø—É—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞"""
    await bot.music_player.skip_song(ctx)

@bot.hybrid_command(name='pause', description='–ü–∞—É–∑–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è')
async def pause_song(ctx):
    """–ü–∞—É–∑–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
    await bot.music_player.pause_song(ctx)

@bot.hybrid_command(name='resume', aliases=['r'], description='–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è')
async def resume_song(ctx):
    """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
    await bot.music_player.resume_song(ctx)

@bot.hybrid_command(name='stop', description='–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏')
async def stop_playback(ctx):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
    await bot.music_player.stop_playback(ctx)

@bot.hybrid_command(name='queue', aliases=['q'], description='–ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–π –æ—á–µ—Ä–µ–¥–∏')
async def show_queue(ctx):
    """–ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–π –æ—á–µ—Ä–µ–¥–∏"""
    await bot.music_player.show_queue(ctx)

@bot.hybrid_command(name='disconnect', aliases=['dc'], description='–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞')
async def disconnect_bot(ctx):
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
    await bot.music_player.disconnect(ctx)

@bot.hybrid_command(name='playlist', aliases=['pl'], description='–ü–æ–∏—Å–∫ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞')
@app_commands.describe(query='–ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞')
async def play_playlist(ctx, *, query: str = None):
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞"""
    if not query:
        await ctx.send("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞! –ü—Ä–∏–º–µ—Ä: `!playlist –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞`")
        return
    
    if not await bot.music_player.join_voice_channel(ctx):
        return
    
    search_msg = await ctx.send("üîç –ò—â—É –ø–ª–µ–π–ª–∏—Å—Ç...")
    
    try:
        import random
        # 1) –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∞–ª—å–±–æ–º ‚Äî –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞–ª—å–±–æ–º
        if isinstance(query, str) and "music.yandex.ru/album/" in query:
            try:
                album_id = query.split("music.yandex.ru/album/")[-1].split('?')[0].split('/')[0]
                album_tracks = await bot.playlist_manager.get_album_tracks(album_id, limit=50)
                if not album_tracks:
                    await search_msg.edit(content="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–∫–∏ –∞–ª—å–±–æ–º–∞!")
                    return
                tracks = random.sample(album_tracks, min(10, len(album_tracks)))
            except Exception as album_err:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞/–∑–∞–≥—Ä—É–∑–∫–∏ –∞–ª—å–±–æ–º–∞: {album_err}")
                await search_msg.edit(content="‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏ –∞–ª—å–±–æ–º–∞!")
                return
        else:
            # 2) –ò–Ω–∞—á–µ –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–ª–µ–π–ª–∏—Å—Ç (–∏–ª–∏ URL –ø–ª–µ–π–ª–∏—Å—Ç–∞)
            playlists = await bot.playlist_manager.search_playlists(query, limit=5)
            if not playlists:
                await search_msg.edit(content="‚ùå –ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            playlist = playlists[0]
            tracks_list = await bot.playlist_manager.get_playlist_tracks(playlist['id'], limit=50)
            if not tracks_list:
                await search_msg.edit(content="‚ùå –ü–ª–µ–π–ª–∏—Å—Ç –ø—É—Å—Ç!")
                return
            tracks = random.sample(tracks_list, min(10, len(tracks_list)))
        
        if not tracks:
            await search_msg.edit(content="‚ùå –ü–ª–µ–π–ª–∏—Å—Ç –ø—É—Å—Ç!")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å
        added_count = 0
        for track in tracks:
            track_url = await bot.yandex_client.get_track_url(track['id'])
            if track_url and await bot.music_player.add_to_queue(ctx, track, track_url):
                added_count += 1
        
        if added_count > 0:
            await search_msg.edit(content=f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} —Ç—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å!")
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            voice_client = bot.music_player.get_voice_client(ctx.guild.id)
            if not voice_client.is_playing():
                await bot.music_player.play_next(ctx)
        else:
            await search_msg.edit(content="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å!")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ playlist: {e}")
        await search_msg.edit(content="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞!")

@bot.hybrid_command(name='liked', aliases=['l'], description='–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ç—Ä–µ–∫–æ–≤')
async def play_liked_tracks(ctx):
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ç—Ä–µ–∫–æ–≤"""
    if not await bot.music_player.join_voice_channel(ctx):
        return
    
    search_msg = await ctx.send("‚ù§Ô∏è –ó–∞–≥—Ä—É–∂–∞—é –ª–∞–π–∫–Ω—É—Ç—ã–µ —Ç—Ä–µ–∫–∏...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ª–∞–π–∫–Ω—É—Ç—ã–µ —Ç—Ä–µ–∫–∏
        tracks = await bot.playlist_manager.get_liked_tracks(limit=10)
        
        if not tracks:
            await search_msg.edit(content="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ç—Ä–µ–∫–æ–≤!")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å
        added_count = 0
        for track in tracks:
            track_url = await bot.yandex_client.get_track_url(track['id'])
            if track_url and await bot.music_player.add_to_queue(ctx, track, track_url):
                added_count += 1
        
        if added_count > 0:
            await search_msg.edit(content=f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ç—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å!")
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            voice_client = bot.music_player.get_voice_client(ctx.guild.id)
            if not voice_client.is_playing():
                await bot.music_player.play_next(ctx)
        else:
            await search_msg.edit(content="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å!")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ liked: {e}")
        await search_msg.edit(content="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ç—Ä–µ–∫–æ–≤!")

@bot.command(name='testliked')
async def test_liked_command(ctx):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ç—Ä–µ–∫–æ–≤ –Ω–∞–ø—Ä—è–º—É—é"""
    try:
        await ctx.send("üîç –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ç—Ä–µ–∫–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–∞–π–∫–Ω—É—Ç—ã–µ —Ç—Ä–µ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
        liked_tracks = await asyncio.get_event_loop().run_in_executor(
            None,
            bot.yandex_client.client.users_likes_tracks
        )
        
        logger.info("–ü–æ–ª—É—á–µ–Ω—ã –ª–∞–π–∫–Ω—É—Ç—ã–µ —Ç—Ä–µ–∫–∏ (–æ–±—ä–µ–∫—Ç –ø–æ–ª—É—á–µ–Ω)")
        if hasattr(liked_tracks, 'tracks'):
            logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤: {len(liked_tracks.tracks) if liked_tracks.tracks else 0}")
        
        if liked_tracks and hasattr(liked_tracks, 'tracks') and liked_tracks.tracks:
            # –ü–æ–ª—É—á–∞–µ–º ID —Ç—Ä–µ–∫–æ–≤
            track_ids = []
            for i, track_short in enumerate(liked_tracks.tracks[:5]):
                try:
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è ID
                    if hasattr(track_short, 'id'):
                        track_ids.append(track_short.id)
                    elif isinstance(track_short, dict) and 'id' in track_short:
                        track_ids.append(track_short['id'])
                    else:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –¥–ª—è —Ç—Ä–µ–∫–∞ {i}: {track_short}")
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID —Ç—Ä–µ–∫–∞ {i}: {e}")
            
            logger.info(f"–ó–∞–≥—Ä—É–∂–∞—é {len(track_ids)} —Ç—Ä–µ–∫(–∞/–æ–≤)")
            
            if track_ids:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–∞—Ö
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º tracks API –Ω–∞–ø—Ä—è–º—É—é
                    full_tracks = await asyncio.get_event_loop().run_in_executor(
                        None,
                        bot.yandex_client.client.tracks,
                        track_ids
                    )
                    
                    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(full_tracks) if full_tracks else 0} —Ç—Ä–µ–∫–æ–≤")
                    
                    tracks = []
                    if full_tracks:
                        for i, track in enumerate(full_tracks[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                            if track:
                                track_info = {
                                    'id': track.id,
                                    'title': track.title,
                                    'artist': ', '.join([artist.name for artist in track.artists]),
                                    'duration': track.duration_ms // 1000
                                }
                                tracks.append(track_info)
                except Exception as fetch_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–æ–≤: {fetch_error}")
                    tracks = []
            else:
                tracks = []
            
            if tracks:
                embed = discord.Embed(
                    title="‚ù§Ô∏è –õ–∞–π–∫–Ω—É—Ç—ã–µ —Ç—Ä–µ–∫–∏ (—Ç–µ—Å—Ç)",
                    description=f"–ù–∞–π–¥–µ–Ω–æ {len(tracks)} —Ç—Ä–µ–∫–æ–≤",
                    color=0x00ff00
                )
                
                for i, track in enumerate(tracks, 1):
                    embed.add_field(
                        name=f"{i}. {track['title']}",
                        value=f"üë§ {track['artist']}\n‚è±Ô∏è {track['duration']}—Å\nüÜî ID: {track['id']}",
                        inline=False
                    )
                
                await ctx.send(embed=embed)
            else:
                await ctx.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–∫–∏ –∏–∑ liked_tracks")
        else:
            await ctx.send("‚ùå liked_tracks –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç tracks")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã testliked: {e}")
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ç—Ä–µ–∫–æ–≤: {e}")

@bot.command(name='myplaylists')
async def my_playlists_command(ctx):
    """–ü–æ–∫–∞–∑ –≤—Å–µ—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        await ctx.send("üîç –ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        playlists = await bot.yandex_client.get_user_playlists()
        
        if not playlists:
            await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏—Ö –∑–∞–≥—Ä—É–∑–∏—Ç—å!")
            return
        
        embed = discord.Embed(
            title="üìã –í–∞—à–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã",
            description=f"–ù–∞–π–¥–µ–Ω–æ {len(playlists)} –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤",
            color=0x00ff00
        )
        
        for i, playlist in enumerate(playlists[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            embed.add_field(
                name=f"{i}. {playlist['title']}",
                value=f"üéµ {playlist['track_count']} —Ç—Ä–µ–∫–æ–≤\nüÜî ID: {playlist['id']}",
                inline=False
            )
        
        if len(playlists) > 10:
            embed.add_field(
                name="...",
                value=f"–ò –µ—â–µ {len(playlists) - 10} –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤",
                inline=False
            )
        
        await ctx.send(embed=embed)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã myplaylists: {e}")
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤: {e}")

@bot.command(name='test')
async def test_search(ctx, *, query=None):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∏—Å–∫–∞"""
    if not query:
        await ctx.send("‚ùå –£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è! –ü—Ä–∏–º–µ—Ä: `!test –ø–µ—Å–Ω—è`")
        return
    
    try:
        tracks = await bot.yandex_client.search_tracks(query, limit=3)
        if tracks:
            embed = discord.Embed(title="üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞", color=0x00ff00)
            for i, track in enumerate(tracks, 1):
                embed.add_field(
                    name=f"{i}. {track['title']}",
                    value=f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {track['artist']}\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {track['duration']}—Å",
                    inline=False
                )
            await ctx.send(embed=embed)
        else:
            await ctx.send("‚ùå –¢—Ä–µ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")

@bot.command(name='debug')
async def debug_api(ctx, *, query="—Ç–µ—Å—Ç"):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API"""
    try:
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
        tracks = await bot.yandex_client.search_tracks(query, limit=3)
        
        embed = discord.Embed(title="üîß –û—Ç–ª–∞–¥–∫–∞ API", color=0xff9900)
        embed.add_field(name="–ó–∞–ø—Ä–æ—Å", value=query, inline=False)
        embed.add_field(name="–ù–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤", value=len(tracks), inline=True)
        embed.add_field(name="–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", value="‚úÖ" if bot.yandex_client.is_authenticated else "‚ùå", inline=True)
        
        if tracks:
            for i, track in enumerate(tracks, 1):
                embed.add_field(
                    name=f"–¢—Ä–µ–∫ {i}",
                    value=f"**{track['title']}**\n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {track['artist']}\nID: {track['id']}",
                    inline=False
                )
        else:
            embed.add_field(name="–†–µ–∑—É–ª—å—Ç–∞—Ç", value="‚ùå –¢—Ä–µ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", inline=False)
        
        await ctx.send(embed=embed)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {e}")
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {e}")

@bot.command(name='url')
async def test_track_url(ctx, *, track_id):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è URL —Ç—Ä–µ–∫–∞ –ø–æ ID"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
        track_info = await bot.yandex_client.get_track_info_by_id(track_id)
        
        if not track_info:
            await ctx.send("‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º URL
        track_url = await bot.yandex_client.get_track_url(track_id)
        
        embed = discord.Embed(title="üîó –¢–µ—Å—Ç URL —Ç—Ä–µ–∫–∞", color=0x0099ff)
        embed.add_field(name="ID —Ç—Ä–µ–∫–∞", value=track_id, inline=False)
        embed.add_field(name="–ù–∞–∑–≤–∞–Ω–∏–µ", value=track_info['title'], inline=False)
        embed.add_field(name="–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", value=track_info['artist'], inline=False)
        
        if track_url:
            embed.add_field(name="URL", value=f"‚úÖ –ü–æ–ª—É—á–µ–Ω (–¥–ª–∏–Ω–∞: {len(track_url)} —Å–∏–º–≤–æ–ª–æ–≤)", inline=False)
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ URL –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            embed.add_field(name="URL (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤)", value=track_url[:100] + "...", inline=False)
        else:
            embed.add_field(name="URL", value="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å", inline=False)
        
        await ctx.send(embed=embed)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è URL: {e}")
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è URL: {e}")

@bot.command(name='urltest')
async def detailed_url_test(ctx, *, track_id):
    """–î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–æ–ª—É—á–µ–Ω–∏—è URL"""
    try:
        embed = discord.Embed(title="üîß –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç URL", color=0xff6600)
        embed.add_field(name="ID —Ç—Ä–µ–∫–∞", value=track_id, inline=False)
        
        # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ
        track_info = await bot.yandex_client.get_track_info_by_id(track_id)
        if track_info:
            embed.add_field(name="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–∫–µ", value=f"‚úÖ {track_info['title']} - {track_info['artist']}", inline=False)
        else:
            embed.add_field(name="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–∫–µ", value="‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω–∞", inline=False)
            await ctx.send(embed=embed)
            return
        
        # –¢–µ—Å—Ç 2: –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è URL
        track_url = await bot.yandex_client.get_track_url(track_id)
        if track_url:
            embed.add_field(name="URL (–æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥)", value=f"‚úÖ –ü–æ–ª—É—á–µ–Ω", inline=True)
            embed.add_field(name="–î–ª–∏–Ω–∞ URL", value=f"{len(track_url)} —Å–∏–º–≤–æ–ª–æ–≤", inline=True)
        else:
            embed.add_field(name="URL (–æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥)", value="‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω", inline=True)
        
        # –¢–µ—Å—Ç 3: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
        alt_url = await bot.yandex_client._get_track_url_alternative(track_id)
        if alt_url:
            embed.add_field(name="URL (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π)", value=f"‚úÖ –ü–æ–ª—É—á–µ–Ω", inline=True)
        else:
            embed.add_field(name="URL (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π)", value="‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω", inline=True)
        
        # –¢–µ—Å—Ç 4: yt-dlp –º–µ—Ç–æ–¥
        ytdlp_url = await bot.yandex_client.get_track_url_ytdlp(track_id)
        if ytdlp_url:
            embed.add_field(name="URL (yt-dlp)", value=f"‚úÖ –ü–æ–ª—É—á–µ–Ω", inline=True)
        else:
            embed.add_field(name="URL (yt-dlp)", value="‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω", inline=True)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ URL –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        if track_url:
            embed.add_field(name="URL (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤)", value=track_url[:200] + "..." if len(track_url) > 200 else track_url, inline=False)
        
        await ctx.send(embed=embed)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è URL: {e}")
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

@bot.hybrid_command(name='status', description='–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞')
async def bot_status(ctx):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    embed = discord.Embed(title="ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞", color=0x00ff00)
    
    # –°—Ç–∞—Ç—É—Å Discord
    embed.add_field(name="Discord", value="‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω", inline=True)
    
    # –°—Ç–∞—Ç—É—Å –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏
    if bot.yandex_client.is_authenticated:
        embed.add_field(name="–Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞", value="‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", inline=True)
    else:
        embed.add_field(name="–Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞", value="‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", inline=True)
    
    # –°—Ç–∞—Ç—É—Å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    voice_client = bot.music_player.get_voice_client(ctx.guild.id)
    if voice_client and voice_client.is_connected():
        embed.add_field(name="–ì–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª", value=f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ {voice_client.channel.name}", inline=True)
    else:
        embed.add_field(name="–ì–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª", value="‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", inline=True)
    
    # –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
    queue = bot.music_player.get_queue(ctx.guild.id)
    embed.add_field(name="–û—á–µ—Ä–µ–¥—å", value=f"üìã {len(queue)} —Ç—Ä–µ–∫–æ–≤", inline=True)
    
    # –¢–µ–∫—É—â–∏–π —Ç—Ä–µ–∫
    current = bot.music_player.current_song.get(ctx.guild.id)
    if current:
        embed.add_field(name="–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç", value=f"üéµ {current['title']} - {current['artist']}", inline=False)
    else:
        embed.add_field(name="–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç", value="üîá –ù–∏—á–µ–≥–æ", inline=False)
    
    await ctx.send(embed=embed)

@bot.hybrid_command(name='help', description='–ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º')
async def help_command(ctx):
    """–ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    embed = discord.Embed(
        title="üéµ –ö–æ–º–∞–Ω–¥—ã –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞ –ë–æ—Ç–∞",
        description="–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:",
        color=0x00ff00
    )
    
    commands_list = [
        ("`!play <–∑–∞–ø—Ä–æ—Å>` / `/play`", "–ü–æ–∏—Å–∫ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞"),
        ("`!mywave` / `/mywave`", "–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ '–ú–æ—è –≤–æ–ª–Ω–∞'"),
        ("`!mywavetest`", "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ '–ú–æ—è –≤–æ–ª–Ω–∞'"),
        ("`!radiodebug`", "–û—Ç–ª–∞–¥–∫–∞ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–π"),
        ("`!radiotest <ID>`", "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏"),
        ("`!mywavedirect`", "–ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ user:onyourwave"),
        ("`!mywaveoff` / `/mywaveoff`", "–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ '–ú–æ—è –≤–æ–ª–Ω–∞'"),
        ("`!played` / `/played`", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–≥—Ä–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤"),
        ("`!playlist <–∑–∞–ø—Ä–æ—Å>` / `/playlist`", "–ü–æ–∏—Å–∫ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞"),
        ("`!liked` / `/liked`", "–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ç—Ä–µ–∫–æ–≤"),
        ("`!myplaylists`", "–ü–æ–∫–∞–∑ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤"),
        ("`!test <–∑–∞–ø—Ä–æ—Å>`", "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–∫–æ–≤"),
        ("`!debug <–∑–∞–ø—Ä–æ—Å>`", "–û—Ç–ª–∞–¥–∫–∞ API –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏"),
        ("`!url <ID_—Ç—Ä–µ–∫–∞>`", "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è URL —Ç—Ä–µ–∫–∞"),
        ("`!urltest <ID_—Ç—Ä–µ–∫–∞>`", "–î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ URL"),
        ("`!status` / `/status`", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"),
        ("`!skip` / `/skip`", "–ü—Ä–æ–ø—É—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞"),
        ("`!pause` / `/pause`", "–ü–∞—É–∑–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"),
        ("`!resume` / `/resume`", "–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"),
        ("`!stop` / `/stop`", "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏"),
        ("`!queue` / `/queue`", "–ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–π –æ—á–µ—Ä–µ–¥–∏"),
        ("`!disconnect` / `/disconnect`", "–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞"),
        ("`!help` / `/help`", "–ü–æ–∫–∞–∑ —ç—Ç–æ–π —Å–ø—Ä–∞–≤–∫–∏")
    ]
    
    for command, description in commands_list:
        embed.add_field(name=command, value=description, inline=False)
    
    embed.set_footer(text="–ë–æ—Ç –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –º—É–∑—ã–∫–∏ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫—É ‚Ä¢ –í–µ—Ä—Å–∏—è 1.0")
    
    await ctx.send(embed=embed)

# –ö–æ–º–∞–Ω–¥–∞ release —É–¥–∞–ª–µ–Ω–∞ –ø–æ –ø–æ–∂–µ–ª–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

if __name__ == "__main__":
    if not DISCORD_TOKEN:
        logger.error("DISCORD_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        exit(1)
    
    try:
        bot.run(DISCORD_TOKEN)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

