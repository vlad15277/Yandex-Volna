import asyncio
import discord
from discord.ext import commands
from discord.ui import View, Button
import yt_dlp
import logging
from collections import deque
from config import MAX_QUEUE_SIZE, MAX_SONG_LENGTH, ERROR_MESSAGES
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ FFmpeg –≤ PATH
ffmpeg_path = r"D:\PROJECT\VSC\YANDEX.MUSIC\ffmpeg\bin"
if ffmpeg_path not in os.environ.get("PATH", ""):
    os.environ["PATH"] = ffmpeg_path + os.pathsep + os.environ.get("PATH", "")

logger = logging.getLogger(__name__)

class MusicControlView(View):
    """–ö–ª–∞—Å—Å –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—É–∑—ã–∫–æ–π"""
    
    def __init__(self, music_player, guild_id):
        super().__init__(timeout=300)  # 5 –º–∏–Ω—É—Ç timeout
        self.music_player = music_player
        self.guild_id = guild_id
        
        # –ö–Ω–æ–ø–∫–∞ –ø–∞—É–∑—ã/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.pause_button = Button(
            style=discord.ButtonStyle.secondary,  # –ñ–µ–ª—Ç—ã–π —Ü–≤–µ—Ç
            emoji="‚è∏Ô∏è",
            label="–ü–∞—É–∑–∞",
            custom_id="pause"
        )
        self.pause_button.callback = self.pause_callback
        self.add_item(self.pause_button)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.stop_button = Button(
            style=discord.ButtonStyle.danger,  # –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç
            emoji="‚èπÔ∏è",
            label="–°—Ç–æ–ø",
            custom_id="stop"
        )
        self.stop_button.callback = self.stop_callback
        self.add_item(self.stop_button)
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞
        self.skip_button = Button(
            style=discord.ButtonStyle.primary,  # –°–∏–Ω–∏–π —Ü–≤–µ—Ç
            emoji="‚è≠Ô∏è",
            label="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
            custom_id="skip"
        )
        self.skip_button.callback = self.skip_callback
        self.add_item(self.skip_button)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–µ—Ä–µ–¥–∏
        self.queue_button = Button(
            style=discord.ButtonStyle.secondary,
            emoji="üìã",
            label="–û—á–µ—Ä–µ–¥—å",
            custom_id="queue"
        )
        self.queue_button.callback = self.queue_callback
        self.add_item(self.queue_button)

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â–∏
        self.help_button = Button(
            style=discord.ButtonStyle.secondary,
            emoji="‚ùì",
            label="Help",
            custom_id="help"
        )
        self.help_button.callback = self.help_callback
        self.add_item(self.help_button)
    
    async def pause_callback(self, interaction):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–∞—É–∑—ã/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            voice_client = self.music_player.get_voice_client(self.guild_id)
            
            if not voice_client or not voice_client.is_connected():
                await interaction.response.send_message("‚ùå –ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!", ephemeral=True)
                return
            
            if voice_client.is_paused():
                voice_client.resume()
                self.pause_button.emoji = "‚è∏Ô∏è"
                self.pause_button.label = "–ü–∞—É–∑–∞"
                self.pause_button.style = discord.ButtonStyle.secondary  # –ñ–µ–ª—Ç—ã–π —Ü–≤–µ—Ç –¥–ª—è –ø–∞—É–∑—ã
                await interaction.response.edit_message(content="‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ!", view=self)
            elif voice_client.is_playing():
                voice_client.pause()
                self.pause_button.emoji = "‚ñ∂Ô∏è"
                self.pause_button.label = "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
                self.pause_button.style = discord.ButtonStyle.success  # –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
                await interaction.response.edit_message(content="‚è∏Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!", view=self)
            else:
                await interaction.response.send_message("‚ùå –°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç!", ephemeral=True)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ pause_callback: {e}")
            await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", ephemeral=True)
    
    async def stop_callback(self, interaction):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        try:
            voice_client = self.music_player.get_voice_client(self.guild_id)
            
            if not voice_client or not voice_client.is_connected():
                await interaction.response.send_message("‚ùå –ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!", ephemeral=True)
                return
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º, —á–∏—Å—Ç–∏–º –æ—á–µ—Ä–µ–¥—å –∏ –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            voice_client.stop()
            queue = self.music_player.get_queue(self.guild_id)
            queue.clear()
            self.music_player.current_song[self.guild_id] = None
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º "–ú–æ—è –≤–æ–ª–Ω–∞" –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            self.music_player.my_wave_mode[self.guild_id] = False
            if self.guild_id in self.music_player.my_wave_batch_id:
                del self.music_player.my_wave_batch_id[self.guild_id]
            if self.guild_id in self.music_player.played_tracks:
                del self.music_player.played_tracks[self.guild_id]
            
            await voice_client.disconnect()
            if self.guild_id in self.music_player.voice_clients:
                del self.music_player.voice_clients[self.guild_id]
            
            await interaction.response.edit_message(content="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞!", view=None)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ stop_callback: {e}")
            await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", ephemeral=True)
    
    async def skip_callback(self, interaction):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞"""
        try:
            voice_client = self.music_player.get_voice_client(self.guild_id)
            
            if not voice_client or not voice_client.is_connected():
                await interaction.response.send_message("‚ùå –ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!", ephemeral=True)
                return
            
            if not voice_client.is_playing():
                await interaction.response.send_message("‚ùå –°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç!", ephemeral=True)
                return
            
            # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º "–ú–æ—è –≤–æ–ª–Ω–∞", –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–∫
            if self.music_player.my_wave_mode.get(self.guild_id, False):
                logger.info("–†–µ–∂–∏–º '–ú–æ—è –≤–æ–ª–Ω–∞' –∞–∫—Ç–∏–≤–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–∫...")
                # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞
                class FakeContext:
                    def __init__(self, guild_id):
                        self.guild = type('Guild', (), {'id': guild_id})()
                
                fake_ctx = FakeContext(self.guild_id)
                await self.music_player._add_next_my_wave_track(fake_ctx)
            
            voice_client.stop()
            await interaction.response.edit_message(content="‚è≠Ô∏è –¢—Ä–µ–∫ –ø—Ä–æ–ø—É—â–µ–Ω!", view=self)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ skip_callback: {e}")
            await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", ephemeral=True)
    
    async def queue_callback(self, interaction):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—á–µ—Ä–µ–¥–∏"""
        try:
            queue = self.music_player.get_queue(self.guild_id)
            current_song = self.music_player.current_song.get(self.guild_id)
            
            if not queue and not current_song:
                await interaction.response.send_message("üìã –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞!", ephemeral=True)
                return
            
            embed = discord.Embed(
                title="üìã –û—á–µ—Ä–µ–¥—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è",
                color=0x00ff00
            )
            
            if current_song:
                embed.add_field(
                    name="üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç",
                    value=f"**{current_song['title']}**\n{current_song['artist']}",
                    inline=False
                )
            
            if queue:
                queue_text = ""
                for i, song in enumerate(list(queue)[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                    queue_text += f"{i}. **{song['title']}** - {song['artist']}\n"
                
                if len(queue) > 10:
                    queue_text += f"... –∏ –µ—â–µ {len(queue) - 10} —Ç—Ä–µ–∫–æ–≤"
                
                embed.add_field(
                    name=f"üìã –í –æ—á–µ—Ä–µ–¥–∏ ({len(queue)} —Ç—Ä–µ–∫–æ–≤)",
                    value=queue_text,
                    inline=False
                )
            
            await interaction.response.send_message(embed=embed, ephemeral=True)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ queue_callback: {e}")
            await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", ephemeral=True)

    async def help_callback(self, interaction):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
        try:
            embed = discord.Embed(
                title="üéµ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞",
                description="–î–æ—Å—Ç—É–ø–Ω—ã prefix `!` –∏ slash `/` –∫–æ–º–∞–Ω–¥—ã",
                color=0x00ff00
            )
            embed.add_field(name="–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ", value="`!play`, `/play`, `!playlist`, `/playlist`, `!liked`, `/liked`", inline=False)
            embed.add_field(name="–ú–æ—è –≤–æ–ª–Ω–∞", value="`!mywave`, `/mywave`, `!mywaveoff`, `/mywaveoff`", inline=False)
            embed.add_field(name="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", value="`!skip`, `!pause`, `!resume`, `!stop`, `!queue`, `!disconnect` (–µ—Å—Ç—å –∏ slash)", inline=False)
            embed.set_footer(text="–î–ª—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `!help` –∏–ª–∏ `/help`")
            await interaction.response.send_message(embed=embed, ephemeral=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ help_callback: {e}")
            await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", ephemeral=True)

class MusicPlayer:
    def __init__(self, bot):
        self.bot = bot
        self.queues = {}  # –°–ª–æ–≤–∞—Ä—å –æ—á–µ—Ä–µ–¥–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        self.current_song = {}  # –¢–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        self.voice_clients = {}  # –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        self.my_wave_mode = {}  # –§–ª–∞–≥ —Ä–µ–∂–∏–º–∞ "–ú–æ—è –≤–æ–ª–Ω–∞" –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        self.my_wave_batch_id = {}  # Batch ID –¥–ª—è "–ú–æ—è –≤–æ–ª–Ω–∞" –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        self.played_tracks = {}  # –°–ø–∏—Å–æ–∫ —É–∂–µ –ø—Ä–æ–∏–≥—Ä–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        
    def get_queue(self, guild_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞"""
        if guild_id not in self.queues:
            self.queues[guild_id] = deque()
        return self.queues[guild_id]
    
    def get_voice_client(self, guild_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞"""
        return self.voice_clients.get(guild_id)
    
    def get_played_tracks(self, guild_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∏–≥—Ä–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞"""
        if guild_id not in self.played_tracks:
            self.played_tracks[guild_id] = set()
        return self.played_tracks[guild_id]
    
    async def join_voice_channel(self, ctx):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É"""
        if not ctx.author.voice:
            await ctx.send(ERROR_MESSAGES['no_voice_channel'])
            return False
        
        voice_channel = ctx.author.voice.channel
        # –ü—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à
        voice_client = self.get_voice_client(ctx.guild.id)
        if not voice_client:
            existing_vc = discord.utils.get(self.bot.voice_clients, guild=ctx.guild)
            if existing_vc:
                self.voice_clients[ctx.guild.id] = existing_vc
                voice_client = existing_vc
        
        # –ï—Å–ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
        if voice_client and voice_client.is_connected():
            if voice_client.channel != voice_channel:
                try:
                    await voice_client.move_to(voice_channel)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª: {e}")
                    await ctx.send("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª!")
                    return False
            return True
        
        # –ò–Ω–∞—á–µ –ø—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        try:
            voice_client = await voice_channel.connect(timeout=10.0, reconnect=True)
            self.voice_clients[ctx.guild.id] = voice_client
            return True
        except discord.ClientException as e:
            # –ß–∞—Å—Ç—ã–π –∫–µ–π—Å: Already connected ‚Äî –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç
            logger.warning(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ (–≤–µ—Ä–æ—è—Ç–Ω–æ, —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω): {e}")
            existing_vc = discord.utils.get(self.bot.voice_clients, guild=ctx.guild)
            if existing_vc:
                self.voice_clients[ctx.guild.id] = existing_vc
                if existing_vc.channel != voice_channel:
                    try:
                        await existing_vc.move_to(voice_channel)
                    except Exception as move_err:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–æ—Å–ª–µ Already connected: {move_err}")
                        await ctx.send("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª!")
                        return False
                return True
            await ctx.send("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É: {e}")
            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ–¥–∏–Ω —Ä–∞–∑ (–≤ —Ç.—á. –¥–ª—è 'list index out of range')
            try:
                await asyncio.sleep(0.5)
                existing_vc = discord.utils.get(self.bot.voice_clients, guild=ctx.guild)
                if existing_vc:
                    self.voice_clients[ctx.guild.id] = existing_vc
                    if existing_vc.channel != voice_channel:
                        await existing_vc.move_to(voice_channel)
                    return True
                voice_client = await voice_channel.connect(timeout=10.0, reconnect=True)
                self.voice_clients[ctx.guild.id] = voice_client
                return True
            except Exception as e2:
                logger.error(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É: {e2}")
                await ctx.send("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!")
                return False
    
    async def play_next(self, ctx):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞ –≤ –æ—á–µ—Ä–µ–¥–∏"""
        queue = self.get_queue(ctx.guild.id)
        voice_client = self.get_voice_client(ctx.guild.id)
        
        if not voice_client or not voice_client.is_connected():
            return
        
        if not queue:
            # –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ –∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º "–ú–æ—è –≤–æ–ª–Ω–∞", –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–∫
            if self.my_wave_mode.get(ctx.guild.id, False):
                logger.info("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –Ω–æ —Ä–µ–∂–∏–º '–ú–æ—è –≤–æ–ª–Ω–∞' –∞–∫—Ç–∏–≤–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–∫...")
                if await self._add_next_my_wave_track(ctx):
                    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º play_next –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
                    await self.play_next(ctx)
                    return
                else:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ –∏–∑ '–ú–æ—è –≤–æ–ª–Ω–∞'")
            
            # –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            self.current_song[ctx.guild.id] = None
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        song = queue.popleft()
        self.current_song[ctx.guild.id] = song
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫ –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–≥—Ä–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å ID)
        if 'id' in song and song['id']:
            played_tracks = self.get_played_tracks(ctx.guild.id)
            played_tracks.add(song['id'])
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å FFmpeg
            import shutil
            if not shutil.which('ffmpeg'):
                logger.error("FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH!")
                await ctx.send("‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É.")
                return
            
            # –°–æ–∑–¥–∞–µ–º FFmpeg –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            source = discord.FFmpegPCMAudio(
                song['url'],
                before_options="-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5"
            )
            
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Ç—Ä–µ–∫
            voice_client.play(
                source,
                after=lambda e: asyncio.run_coroutine_threadsafe(
                    self.play_next(ctx), 
                    self.bot.loop
                ) if e is None else logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ
            embed = discord.Embed(
                title="üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç",
                description=f"**{song['title']}**\n"
                           f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {song['artist']}\n"
                           f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {self.format_duration(song['duration'])}",
                color=0x00ff00
            )
            
            if song.get('cover_url'):
                embed.set_thumbnail(url=song['cover_url'])
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            view = MusicControlView(self, ctx.guild.id)
            
            await ctx.send(embed=embed, view=view)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–∫–∞: {e}")
            await ctx.send(ERROR_MESSAGES['playback_error'])
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫
            await self.play_next(ctx)
    
    def format_duration(self, seconds):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–∫–∞"""
        minutes, seconds = divmod(seconds, 60)
        return f"{minutes}:{seconds:02d}"
    
    async def _add_next_my_wave_track(self, ctx):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞ –∏–∑ '–ú–æ—è –≤–æ–ª–Ω–∞'"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –ø—Ä–æ–∏–≥—Ä–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
            played_tracks = self.get_played_tracks(ctx.guild.id)
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Ç—Ä–µ–∫ –¥–æ 10 —Ä–∞–∑, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
            max_attempts = 10
            for attempt in range(max_attempts):
                # –ü–æ–ª—É—á–∞–µ–º batch_id –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
                batch_id = self.my_wave_batch_id.get(ctx.guild.id)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ –∏–∑ "–ú–æ—è –≤–æ–ª–Ω–∞"
                track = await self.bot.yandex_client.get_next_my_wave_track(batch_id)
                
                if not track:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ –∏–∑ '–ú–æ—è –≤–æ–ª–Ω–∞'")
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É —Ç—Ä–µ–∫–∞ –µ—Å—Ç—å ID
                if 'id' not in track or not track['id']:
                    logger.warning(f"–£ —Ç—Ä–µ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {track.get('title', 'Unknown')}")
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º batch_id –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    if 'batch_id' in track and track['batch_id']:
                        self.my_wave_batch_id[ctx.guild.id] = track['batch_id']
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —Ç—Ä–µ–∫ —É–∂–µ –ø—Ä–æ–∏–≥—Ä–∞–Ω
                if track['id'] not in played_tracks:
                    logger.info(f"–ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π —Ç—Ä–µ–∫ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {track['title']} - {track['artist']}")
                    break
                else:
                    logger.info(f"–¢—Ä–µ–∫ —É–∂–µ –ø—Ä–æ–∏–≥—Ä–∞–Ω (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {track['title']} - {track['artist']}")
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º batch_id –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    if 'batch_id' in track and track['batch_id']:
                        self.my_wave_batch_id[ctx.guild.id] = track['batch_id']
                    continue
            else:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã–π —Ç—Ä–µ–∫ –ø–æ—Å–ª–µ 10 –ø–æ–ø—ã—Ç–æ–∫")
                return False
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º batch_id –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            if 'batch_id' in track and track['batch_id']:
                self.my_wave_batch_id[ctx.guild.id] = track['batch_id']
                logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω batch_id: {track['batch_id']}")
            
            # –ü–æ–ª—É—á–∞–µ–º URL —Ç—Ä–µ–∫–∞
            track_url = await self.bot.yandex_client.get_track_url(track['id'])
            
            if not track_url:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –¥–ª—è —Ç—Ä–µ–∫–∞ {track['id']}")
                return False
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫ –≤ –æ—á–µ—Ä–µ–¥—å
            song = {
                'title': track['title'],
                'artist': track['artist'],
                'duration': track['duration'],
                'url': track_url,
                'id': track['id']
            }
            
            queue = self.get_queue(ctx.guild.id)
            queue.append(song)
            
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ –∏–∑ '–ú–æ—è –≤–æ–ª–Ω–∞': {track['title']} - {track['artist']}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞ –∏–∑ '–ú–æ—è –≤–æ–ª–Ω–∞': {e}")
            return False
    
    async def add_to_queue(self, ctx, song_info, url):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å"""
        queue = self.get_queue(ctx.guild.id)
        
        if len(queue) >= MAX_QUEUE_SIZE:
            await ctx.send(ERROR_MESSAGES['queue_full'])
            return False
        
        if song_info['duration'] > MAX_SONG_LENGTH:
            await ctx.send(ERROR_MESSAGES['song_too_long'])
            return False
        
        song = {
            'title': song_info['title'],
            'artist': song_info['artist'],
            'duration': song_info['duration'],
            'url': url,
            'cover_url': song_info.get('cover_url'),
            'requester': ctx.author
        }
        
        queue.append(song)
        return True
    
    async def skip_song(self, ctx):
        """–ü—Ä–æ–ø—É—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞"""
        voice_client = self.get_voice_client(ctx.guild.id)
        
        if not voice_client or not voice_client.is_playing():
            await ctx.send("–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç!", ephemeral=True)
            return
        
        # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º "–ú–æ—è –≤–æ–ª–Ω–∞", –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–∫ –ø–µ—Ä–µ–¥ –ø—Ä–æ–ø—É—Å–∫–æ–º
        if self.my_wave_mode.get(ctx.guild.id, False):
            logger.info("–†–µ–∂–∏–º '–ú–æ—è –≤–æ–ª–Ω–∞' –∞–∫—Ç–∏–≤–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–∫...")
            await self._add_next_my_wave_track(ctx)
        
        voice_client.stop()
        await ctx.send("‚è≠Ô∏è –¢—Ä–µ–∫ –ø—Ä–æ–ø—É—â–µ–Ω!")
    
    async def pause_song(self, ctx):
        """–ü–∞—É–∑–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        voice_client = self.get_voice_client(ctx.guild.id)
        
        if not voice_client or not voice_client.is_playing():
            await ctx.send("–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç!", ephemeral=True)
            return
        
        voice_client.pause()
        await ctx.send("‚è∏Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
    
    async def resume_song(self, ctx):
        """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        voice_client = self.get_voice_client(ctx.guild.id)
        
        if not voice_client or voice_client.is_playing():
            await ctx.send("–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!", ephemeral=True)
            return
        
        voice_client.resume()
        await ctx.send("‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    
    async def stop_playback(self, ctx):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏"""
        voice_client = self.get_voice_client(ctx.guild.id)
        queue = self.get_queue(ctx.guild.id)
        
        if voice_client:
            voice_client.stop()
        
        queue.clear()
        self.current_song[ctx.guild.id] = None
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º "–ú–æ—è –≤–æ–ª–Ω–∞" –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.my_wave_mode[ctx.guild.id] = False
        if ctx.guild.id in self.my_wave_batch_id:
            del self.my_wave_batch_id[ctx.guild.id]
        if ctx.guild.id in self.played_tracks:
            del self.played_tracks[ctx.guild.id]
        
        # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        if voice_client:
            await voice_client.disconnect()
            if ctx.guild.id in self.voice_clients:
                del self.voice_clients[ctx.guild.id]
        
        await ctx.send("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞!")
    
    async def show_queue(self, ctx):
        """–ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–π –æ—á–µ—Ä–µ–¥–∏"""
        queue = self.get_queue(ctx.guild.id)
        current = self.current_song.get(ctx.guild.id)
        
        if not queue and not current:
            await ctx.send("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞!", ephemeral=True)
            return
        
        embed = discord.Embed(title="üéµ –û—á–µ—Ä–µ–¥—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è", color=0x00ff00)
        
        if current:
            embed.add_field(
                name="–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç",
                value=f"**{current['title']}**\n{current['artist']}",
                inline=False
            )
        
        if queue:
            queue_text = ""
            for i, song in enumerate(list(queue)[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ç—Ä–µ–∫–æ–≤
                queue_text += f"{i}. **{song['title']}** - {song['artist']}\n"
            
            if len(queue) > 10:
                queue_text += f"... –∏ –µ—â–µ {len(queue) - 10} —Ç—Ä–µ–∫–æ–≤"
            
            embed.add_field(name="–û—á–µ—Ä–µ–¥—å", value=queue_text, inline=False)
        
        await ctx.send(embed=embed)
    
    async def disconnect(self, ctx):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        voice_client = self.get_voice_client(ctx.guild.id)
        
        if voice_client:
            await voice_client.disconnect()
            del self.voice_clients[ctx.guild.id]
            self.queues[ctx.guild.id].clear()
            self.current_song[ctx.guild.id] = None
            await ctx.send("üëã –û—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞!")
        else:
            await ctx.send("–ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!", ephemeral=True)
